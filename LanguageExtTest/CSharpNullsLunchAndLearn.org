#+TITLE: C# Null Handling, Validators, and Functional Approaches
#+AUTHOR: Yarek Tyshchenko

* Nulls, Nullable, and Null checks

#+BEGIN_SRC xml
<Nullable>Enable</Nullable>
<WarningsAsErrors>Nullable</WarningsAsErrors>
#+END_SRC

** Assigning null to a non nullable value

#+BEGIN_SRC text
error CS0037: Cannot convert null to 'Guid' because it is a non-nullable value type
#+END_SRC

** What is Nullable<T>

#+BEGIN_SRC csharp
public T? Foo(Guid? id)
{
    if (id.HasValue)
    {
        Guid definitelyId = id.Value;
        return UseId(definitelyId);
    }
    return null;
}
#+END_SRC

* Domain logic validation

#+BEGIN_SRC csharp
public record Gateway(
    Guid id,
    string OrganizationId);
#+END_SRC

+ Immutable
+ Free compare functions

** Typical Record with domain validation

#+BEGIN_SRC csharp
public record Gateway
{
    public Gateway(
        Guid Id,
        string OrganizationId)
    {
        this.Id = Id;
        this.OrganizationId = OrganizationId;
    }

    public Guid Id
    {
        get => this.Id;
        init
        {
            if (value == default)
            {
                throw new ArgumentException(nameof(this.Id));
            }
        }
    }

    public string OrganizationId
    {
        get => this.OrganizationId;
        init
        {
            if (value == string.Empty)
            {
                throw new ArgumentException(nameof(this.OrganizationId));
            }
        }
    }
}
#+END_SRC

** Record with Domain validation pushed to Primitive Types

#+BEGIN_SRC csharp
public record Gateway(
    GatewayId Id,
    OrganizationId OrganisationId);
#+END_SRC

** Primitive Types

#+BEGIN_SRC csharp
    public record NonEmptyGuid
    {
        private readonly Guid _value;

        public NonEmptyGuid(Guid value)
        {
            if (value == default)
            {
                throw new ArgumentOutOfRangeException(nameof(_value));
            }
            _value = value;
        }

        public static implicit operator Guid(NonEmptyGuid value) => value._value;
    }

    public record GatewayId : NonEmptyGuid
    {
        public GatewayId(Guid value) : base(value) {}
    }
#+END_SRC

** Using such Record

#+BEGIN_SRC csharp
var rawGuid = Guid.NewGuid();
var orgId = "Foo";
var gateway = new Gateway(new GatewayId(rawGuid), new OrganizationId(orgId));
Guid guid = gateway.Id;
string org = gateway.OrganizationId;
#+END_SRC

* Functional Forey

** Nullable as a Domain type

#+BEGIN_SRC csharp
T? nullableValue = ...
Option<T> optionalValue = Optional(nullableValue);
#+END_SRC

** Such domain types can be composed together

#+BEGIN_SRC csharp
public Option<T> Foo(Option<Guid> id) =>
    id.Map(definitelyId => UseId(definitelyId));
#+END_SRC

** Example Imperative style method

#+BEGIN_SRC csharp
/**
 * Imperative style describes what happens at every step.
 */
public async Task<Either<string, DeviceConfiguration>> Imperative(string organizationId, string token, Guid deviceId)
{
    var device = await this.DeviceReader.GetDeviceAsync(organizationId, deviceId);
    if (device is null)
    {
        return "Invalid token";
    }

    var gateway = await this.GatewayReader.GetGatewayAsync(organizationId, device.GatewayId);

    // Prevent enumeration attacks by not leaking valid device IDs
    if (gateway is null || gateway.ConfigurationToken != token)
    {
        return "Invalid Token";
    }

    var config = await this.DeviceConfigurationReader.GetLatestDeviceConfigurationByDeviceAsync(organizationId, deviceId);
    if (config is null)
    {
        return $"DeviceId {deviceId} Not found";
    }

    return config;
}
#+END_SRC

** Example refactor to functional style

#+BEGIN_SRC csharp
/**
 * Wrap Task results in Option and Either. Compose them with Bind, which is like a Map function that by
 * convention favours the righty value.
 */
public async Task<Either<string, DeviceConfiguration>> F1(string organizationId, string token, Guid deviceId)
{
    var device = Optional(await this.DeviceReader.GetDeviceAsync(organizationId, deviceId))
        .ToEither("Invalid Token");

    var f2 = await device.BindAsync(async d =>
        Optional(await this.GatewayReader.GetGatewayAsync(organizationId, d.GatewayId))
            .ToEither("Invalid Token"));

    var f3 = f2.Bind<Gateway>(g => g.ConfigurationToken != token ? g : "Invalid Token");

    var config = await f3.BindAsync(async g =>
        Optional(await this.DeviceConfigurationReader
                .GetLatestDeviceConfigurationByDeviceAsync(organizationId, deviceId))
            .ToEither($"DeviceId {deviceId} Not found"));

    return config;
}
#+END_SRC

** Move functional style

#+BEGIN_SRC csharp
/**
 * Use Async variants of Option and Either, which are just those same type classes wrapped in a `Task`.
 * Final `ToEither` converts the result back to an Either wrapped in a Task.
 */
public Task<Either<string, DeviceConfiguration>> F2(string organizationId, string token, Guid deviceId) =>
    OptionalAsync(this.DeviceReader.GetDeviceAsync(organizationId, deviceId))
        .ToEither("Invalid Token")
        .Bind(d => OptionalAsync(this.GatewayReader.GetGatewayAsync(organizationId, d.GatewayId))
            .ToEither("Invalid Token"))
        .Bind<Gateway>(g => g.ConfigurationToken != token ? g : "Invalid Token")
        .Bind(_ => OptionalAsync(this.DeviceConfigurationReader
                .GetLatestDeviceConfigurationByDeviceAsync(organizationId, deviceId))
            .ToEither($"DeviceId {deviceId} Not found"))
        .ToEither();
#+END_SRC

** Even more refactoring

#+BEGIN_SRC csharp
/**
 * Remove redundant Option to Either conversion: Logically there is a bunch of upfront computation that
 * all has the same outcome, either a token is valid, or it isn't, so its represented by types here.
 */
public Task<Either<string, DeviceConfiguration>> F3(string organizationId, string token, Guid deviceId) =>
    OptionalAsync(this.DeviceReader.GetDeviceAsync(organizationId, deviceId))
        .Bind(device => OptionalAsync(this.GatewayReader.GetGatewayAsync(organizationId, device.GatewayId)))
        .Filter(gateway => gateway.ConfigurationToken == token)
        .ToEither("Invalid Token")
        .Bind(_ => OptionalAsync(this.DeviceConfigurationReader
                .GetLatestDeviceConfigurationByDeviceAsync(organizationId, deviceId))
            .ToEither($"DeviceId {deviceId} Not found"))
        .ToEither();
#+END_SRC

** CSharp already has some functional concepts

#+BEGIN_SRC csharp
/**
 * Linq from statements are actually Binds, and select is a Map.
 * Note that linq doesn't have a way to express the change of Type from Option to Either.
 */
public Task<Either<string, DeviceConfiguration>> F4(string organizationId, string token, Guid deviceId) =>
    (from _ in (
            from device in OptionalAsync(this.DeviceReader.GetDeviceAsync(organizationId, deviceId))
            from gateway in OptionalAsync(this.GatewayReader.GetGatewayAsync(organizationId, device.GatewayId))
            where gateway.ConfigurationToken == token
            select gateway).ToEither("Invalid Token")
        from deviceConfiguration in OptionalAsync(this.DeviceConfigurationReader
                .GetLatestDeviceConfigurationByDeviceAsync(organizationId, deviceId))
            .ToEither($"DeviceId {deviceId} Not found")
        select deviceConfiguration).ToEither();
#+END_SRC

** Functional happiness attained

#+BEGIN_SRC csharp
/**
 * Switching method signatures to return OptionAsync and EitherAsync cleans up the body.
 * Error left value is returned from one of the methods, and is mapped. It happens after token is validated
 * so its safe to display that to the user (see: enumeration attack).
 */
public Task<Either<string, DeviceConfiguration>> F5(string organizationId, string token, Guid deviceId) =>
    (from _ in (
            from device in this.DeviceReader.GetDevice(organizationId, deviceId)
            from gateway in this.GatewayReader.GetGateway(organizationId, device.GatewayId)
            where gateway.ConfigurationToken == token
            select gateway).ToEither("Invalid Token")
        from deviceConfiguration in this.DeviceConfigurationReader
            .GetLatestDeviceConfigurationByDevice(organizationId, deviceId)
            .MapLeft(e => e.Message)
        select deviceConfiguration).ToEither();
#+END_SRC

